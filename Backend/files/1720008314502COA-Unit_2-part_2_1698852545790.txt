

KR21                      COMPUTER ORGANIZATION AND 
 
 3. Addressing Modes : 
 
The  operation  field  of  an  instruction  specifies  the  operation  to
operation must be executed on some data stored in computer registers or memory words. The
way the operands are chosen during
the  instruction.  The  addressing  mode  specifies  a  rule  for  interpreting  or  modifying 
theaddressfieldoftheinstructionbeforetheoperandisactuallyreferenced.
Computers use addressing mode techniques for th
the following provisions: 
1 To give programming versatility to the user by providing such facilities as pointers to
Memory, counters for loop
2 To reduce the number of
3 The availability of the addressing modes gives the experienced assembly language
programmer flexibility for writing programs that are more efficient with respect to the
number of instructions and
To  understand  the various
imperative that we understand the basic operation cycle of the computer. The control unit of a
computer is designed to go through
1. Fetch the instruction from
2. Decode the instruction.
3. Execute the  instruction.
 
Addressing modes are as: 
 
1. 
Implied Mode 
Address of the operands are
- No need to specify address in
- EA=AC, or EA=Stack[SP
 
2. 
Immediate Mode 
 
Instead of specifying the address
- No need to specify address in
- However, operand itself
- Sometimes, require more
- Fast to acquire an operand
 
 
EA=Not defined. 
 
3. 
Register Mode 
 
Address specified in the instruction
- Designated operand need
-
 
Shorter address than the 
- Saving address field in the instruction
- FastertoacquireanoperandthanthememoryaddressingEA=
IR(R)(IR(R):RegisterfieldofIR)
KR21                      COMPUTER ORGANIZATION AND ARCHITECTURE                        CSE II/I
Addressing Modes 
The  operation  field  of  an  instruction  specifies  the  operation  to be  performed.  This
operation must be executed on some data stored in computer registers or memory words. The
during program execution independent on the addressing
the  instruction.  The  addressing  mode  specifies  a  rule  for  interpreting  or  modifying 
theaddressfieldoftheinstructionbeforetheoperandisactuallyreferenced. 
Computers use addressing mode techniques for the purpose of accommodating one or both of
To give programming versatility to the user by providing such facilities as pointers to
loop control, indexing of data ,and program relocation
number of bits in the addressing field of the instruction. 
The availability of the addressing modes gives the experienced assembly language
programmer flexibility for writing programs that are more efficient with respect to the
instructions and execution time. 
various  addressing  modes  to  be  presented  in   this
imperative that we understand the basic operation cycle of the computer. The control unit of a
through an instruction cycle that is divided into three
from memory 
instruction. 
nstruction.  
are specified implicitly in the definition of the instruction
address in the  instruction 
EA=Stack[SP], EA : Effective Address. 
address of the operand ,operand itself  is specified
address in the instruction 
itself needs to be specified 
more bits than the address 
operand 
instruction is the register address. 
need to be in a register 
 memory address 
the instruction 
FastertoacquireanoperandthanthememoryaddressingEA=
IR(R)(IR(R):RegisterfieldofIR) 
ARCHITECTURE                        CSE II/I 
be  performed.  This 
operation must be executed on some data stored in computer registers or memory words. The 
addressing mode of 
the  instruction.  The  addressing  mode  specifies  a  rule  for  interpreting  or  modifying 
e purpose of accommodating one or both of 
To give programming versatility to the user by providing such facilities as pointers to 
relocation 
 
The availability of the addressing modes gives the experienced assembly language 
programmer flexibility for writing programs that are more efficient with respect to the 
this  section  ,It  is 
imperative that we understand the basic operation cycle of the computer. The control unit of a 
three major phases: 
instruction 
specified 

KR21                      COMPUTER ORGANIZATION AND 
 
 
4. 
Register Indirect Mode 
 
Instruction specifies a  register
- Savinginstructionbitssinceregisteraddressiss
horterthanthememoryaddress
- Slowertoacquireanoperandthanboththeregi
steraddressingormemoryaddressing
- EA=[IR(R)]([x]: Content
 
5. 
Auto-incrementor  Auto-decrement
 
Same as the Register Indirect, but, when the address in the register is used to access
memory, the value in the register is incremented or decremented by 1 (after or before the
execution of the instruction). 
 
6. 
Direct Address Mode 
 
Instruction specifies the memory address which
memory 
- Faster than the other  memory
- Too many bits are needed
space 
- EA=IR(address),(IR(address): address
 
 
 
 
KR21                      COMPUTER ORGANIZATION AND ARCHITECTURE                        CSE II/I
 
register which contains the memory address of the operand
Savinginstructionbitssinceregisteraddressiss
horterthanthememoryaddress 
Slowertoacquireanoperandthanboththeregi
steraddressingormemoryaddressing 
EA=[IR(R)]([x]: Content of x) 
decrement features: 
Same as the Register Indirect, but, when the address in the register is used to access
the register is incremented or decremented by 1 (after or before the
Instruction specifies the memory address which can  be  used directly to the
memory addressing modes 
needed to specify the address for a large physical memory
EA=IR(address),(IR(address): address field of IR) 
ARCHITECTURE                        CSE II/I 
operand 
Same as the Register Indirect, but, when the address in the register is used to access 
the register is incremented or decremented by 1 (after or before the 
the physical 
memory 

KR21                      COMPUTER ORGANIZATION AND 
 
 
 
7.Indirect Addressing Mode 
 
Theaddressfieldofaninstructionspecifiestheaddressofamemorylocationthatcontainstheaddress 
of the operand 
- Whentheabbreviatedaddressisused,largephysicalmemorycanbeaddressedwitharelativel
ysmallnumberofbits 
- Slow to acquire an operand
- EA=M[IR(address)] 
7. 
Displacement Addressing Mode
 
The Address fields of an instruction
address)  which can  be used along with
the operand 
a) PC Relative Addressing
- EA= PC+IR(address)
- Address field of
- Large physical memory
b) Indexed Addressing Mode
- XR: Index Register:
-EA= XR+ IR(address)
c) Base Register Addressing 
BAR: Base Address Register:
- EA=BAR+IR(address)
 
 
 
 
 
 
 
KR21                      COMPUTER ORGANIZATION AND ARCHITECTURE                        CSE II/I
Theaddressfieldofaninstructionspecifiestheaddressofamemorylocationthatcontainstheaddress 
Whentheabbreviatedaddressisused,largephysicalmemorycanbeaddressedwitharelativel
operand because of an additional memory access 
Mode 
instruction specifies the part of the address (abbreviated
used along with a designated register to  calculate the address
Addressing Mode(R=PC) 
EA= PC+IR(address) 
of the instruction is short 
memory can be accessed with a small number of
Mode 
Register: 
EA= XR+ IR(address) 
Addressing Mode 
Register: 
EA=BAR+IR(address) 
ARCHITECTURE                        CSE II/I 
Theaddressfieldofaninstructionspecifiestheaddressofamemorylocationthatcontainstheaddress 
Whentheabbreviatedaddressisused,largephysicalmemorycanbeaddressedwitharelativel
 
(abbreviated 
address of 
number of address bits 

KR21                      COMPUTER ORGANIZATION AND 
 
 
 
 
Numerical Example: 
 
KR21                      COMPUTER ORGANIZATION AND ARCHITECTURE                        CSE II/IARCHITECTURE                        CSE II/I 
 

KR21                      COMPUTER ORGANIZATION AND ARCHITECTURE                        CSE II/I 
 
Data Transfer & Manipulation 
Computer provides an extensive set of instructions to give the user the flexibility to 
carryout various computational tasks. Most computer instruction can be classified into three 
categories. 
(1) 
Data transfer instruction 
(2) 
Data manipulation instruction 
(3) 
Program control instruction 
Data  transfer  instruction  cause  transferred  data  from  one  location  to  another  without 
changingthebinaryinstructioncontent.Datamanipulationinstructionsarethosethatperformarithmeti
clogic,  and  shift  operations.  Program  control  instructions  provide  decision-making 
capabilitiesandchangethepathtakenbytheprogramwhenexecutedinthecomputer. 
 
(1) 
Data Transfer Instruction  
 
Data  transfer  instruction  move  data  from  one  place  in  the  computer  to  another 
withoutchangingthedatacontent.Themostcommontransfersarebetweenmemoryandprocessesr
egisters,  between  processes  register  &  input  or  output,  and  between  processes  register 
themselves 
(Typical data transfer instruction) 
Name Mnemonic 
Load LD 
Store ST 
Move MOV 
Exchange XCH 
Input IN 
Output OUT 
Push PUSH 
Pop POP 
 
(2) 
Data Manipulation Instruction 
It performs operations on data and provides the computational capabilities for the computer. 
The data manipulation instructions in a typical computer are usually divided into three basic 
types. 
(a) 
Arithmetic Instruction 
(b) 
Logical bit manipulation Instruction 
(c) 
Shift Instruction. 
 
(a) 
Arithmetic Instruction 
Name Mnemonic 
Increment INC 
Decrement DEC 
Add Add 
Subtract Sub 
Multiply MUL 
Divide DIV 
Add with Carry ADDC 
Subtract with Basses SUBB 
Negate(2â€™sComplement) NEG 

KR21                   COMPUTER ORGANIZATION AND ARCHITECTURE                            CSE II/I
(b) 
Logical & Bit Manipulation
 
 
Name
Clear 
Complement 
AND 
OR 
Exclusive-Or 
Clear Carry 
Set Carry 
Complement Carry 
Enable Interrupt 
Disable Interrupt 
(c) 
Shift Instruction 
 
Instructions to shift the content of an operand are quite useful and one often provided in several
variations. Shifts are operation in which the bits of a word are moved to the left or right. The
shifted in at the  end of the word determines the type of shift used. Shift instruction may
logical shift, arithmetic shifts, or 
 
 
Name
Logical Shif tright 
Logical Shift left 
Arithmetic shift right 
Arithmetic shift left 
Rotate right 
Rotate left 
Rotate right through carry
Rotate left through carry
 
 
(3)Program Control: 
 
Instructions are always stored in successive memory locations. When processed in theCPU,the
instructions are fetched from consecutive
 
Status Bit Conditions 
It is sometimes convenient to supplement the ALU circuit in the CPU 
where status b it conditions can be stored for further analysis. Status bits are also called
KR21                   COMPUTER ORGANIZATION AND ARCHITECTURE                            CSE II/I
Manipulation Instruction 
Name Mnemonic 
CLR 
COM 
AND 
OR 
XOR 
CLRC 
SETC 
 COMC 
ET 
OI 
Instructions to shift the content of an operand are quite useful and one often provided in several
variations. Shifts are operation in which the bits of a word are moved to the left or right. The
of the word determines the type of shift used. Shift instruction may
 rotate type shifts. 
Name Mnemonic 
SHR 
SHL 
SHRA 
SHLA 
ROR 
ROL 
carry RORC 
carry ROLC 
Instructions are always stored in successive memory locations. When processed in theCPU,the
consecutive memory locations and executed 
It is sometimes convenient to supplement the ALU circuit in the CPU 
where status b it conditions can be stored for further analysis. Status bits are also called
KR21                   COMPUTER ORGANIZATION AND ARCHITECTURE                            CSE II/I 
Instructions to shift the content of an operand are quite useful and one often provided in several 
variations. Shifts are operation in which the bits of a word are moved to the left or right. The bit-
of the word determines the type of shift used. Shift instruction may specify either 
Instructions are always stored in successive memory locations. When processed in theCPU,the 
It is sometimes convenient to supplement the ALU circuit in the CPU with a status register 
where status b it conditions can be stored for further analysis. Status bits are also called condition-code 

KR21                   COMPUTER ORGANIZATION AND ARCHITECTURE                            CSE II/I 
bits or flag bits. The four status bits are symbolized by C, S, Z, and V. The bits are set or cleared as a 
result of an operation performed in the ALU. 
1. BitC(carry)issetto1iftheendcanyC8is1.Itisclearedto0ifthecarryis0. 
2. BitS(sign)issetto1ifthehighest-orderbitF?is1. Itissetto0ifthebitis0. 
3. BitZ(zero)issetto1iftheoutputoftheALUcontainsall0's.Itisclearedto0otherwise. 
In other words, Z=1 if the output is zero and Z=0 if the output is not zero. 
4. Bit V (overflow) is set to 1 if the exclusive-OR of the last two carries is equal to 1,and 
Cleared to 0 otherwise. This is the condition for an overflow when negative numbers are In 2's 
complement. 
 
 