

Video Link

OurChannels
KG Coding
Some Other One shot Video Links:
•Complete React and Redux
•CompleteHTML
•Complete CSS
•Complete Git and GitHubOne 
shot University Exam Series
Knowledge GATE
KG Coding
KG Placement Prep
Sanchit Socket
KnowledgeGate Website
KnowledgeGate Android App

Introduction to React
1.What is React?
2.Working of DOM
3.Problems with JS
4.Working of React
5.JS Vs React
6.Intro to Components

HTML is required for React

CSS is required for React

JS is required for React

1.JavaScriptlibrary to build Dynamic
and interactiveuser interfaces
2.Developed at Facebookin 2011.
3.Currently most widely used JS 
library for front-end development.
4.Usedto create single page 
application (page does not re-load).
1. What is React

1.Browsertakes HTMLand create DOM.
2.JS helps us modify DOMbased on user actionsor 
events.
3.In big applications, Working with DOMbecomes 
complicated.
2. Working of DOM

1.Reacthas a simpler mental 
model
2.JSis cumbersome
3.JSis Error-prone
4.JSis Hardto maintain
3. Problems with JavaScript

1.No needto worry about queryingand updating DOM elements.
2.React createsa web page with smalland reusable components
3.React will take careof creatingand updating DOMelements.
4.IT savesa lot of time, cheezeinaasanhai, pahelese likhihui hain
4. Working of React

5. JS Vs React
1.JS is imperative:You define stepsto reach your desired 
state.
2.React is Declarative:You define the target UI stateand 
then react figures out how to reach that state.

Components help us write reusable, modular and better organized code.
6. Introduction to Components

6. Introduction to Components

React application is a tree of components with App 
Component as the root bringing everything together.
6. Introduction to Components

FF5F1F
IntroductionRevision
1.What is React?
2.Working of DOM
3.Problems with JS
4.Working of React
5.JS Vs React
6.Intro to Components

OurChannels
KG Coding
Some Other One shot Video Links:
•Complete React and Redux
•CompleteHTML
•Complete CSS
•Complete Git and GitHubOne 
shot University Exam Series
Knowledge GATE
KG Coding
KG Placement Prep
Sanchit Socket
KnowledgeGate Website
KnowledgeGate Android App

Create a React App
7.Setup IDE
8.Create a React App
9.Project Structure

7. What isIDE
FF5F1F
1.IDEstands for Integrated 
Development Environment.
2.Software suite that 
consolidates basic tools 
required for software 
development.
3.Central hub for coding, finding 
problems, and testing.
4.Designed to improve 
developer efficiency.

7. Need ofIDE
FF5F1F
1.Streamlinesdevelopment.
2.Increases productivity.
3.Simplifiescomplex tasks.
4.Offers a unifiedworkspace.
5.IDEFeatures
1.Code Autocomplete
2.Syntax Highlighting
3.Version Control
4.ErrorChecking

7. Installlatest Node
1.Search Download NodeJS

7. Installation & Setup
1.Search VS Code
2.Keep Your Softwareup to date

7. VsCodeExtensions and Settings
1.Live Server / Live Preview
2.Prettier (Format on Save)
3.Line Wrap
4.Tab Size from 4 to 2

8. Create aReact App
1.Officialtool is CRA(Create React APP) 
2.Viteis a modern toolto create ReactProject.
3.Viteproduces Quick and Small bundle size.
4.Vite: Use npmrun dev to launch dev server.
5.Usenpmstart for CRA.

9. Project Structure
1.node_modules/has all the installednode packages
2.public/Directory: Contains static files that don't 
change.
3.src/Directory: Main folder for the React code.
1.components/: Reusable parts of the UI, like buttons 
or headers.
2.assets/: Images, fonts, and other static files.
3.styles/: CSSor stylesheets.
4.package.jsoncontains information about this project 
like name, version, dependencieson other react 
packages.
5.vite.config.jscontains viteconfig.

FF5F1F
Create a React AppRevision
7.Setup IDE
8.Create a React App
9.Project Structure

OurChannels
KG Coding
Some Other One shot Video Links:
•Complete React and Redux
•CompleteHTML
•Complete CSS
•Complete Git and GitHubOne 
shot University Exam Series
Knowledge GATE
KG Coding
KG Placement Prep
Sanchit Socket
KnowledgeGate Website
KnowledgeGate Android App

Creating React Components
10.File Extensions
11.Class vs Function Components
12.What is JSX?
13.Exporting component
14.Other important Points
15.Dynamic Components
16.Reusable Components

10. File Extensions
.JS
•Stands for JavaScript
•Contains regular JavaScript code
•Used for general logic and 
components
.JSX
•Stands for JavaScript XML
•Combines JavaScript with HTML-like 
tags
•Makes it easier to design UI 
components

Class Components
•Stateful: Can manage state.
•Lifecycle: Access to lifecycle methods.
•Verbose: More boilerplate code.
•Not Preferred anymore.
Functional Components
•Initially stateless.
•Can use Hooks for state and effects.
•Simpler and more concise.
•More Popular.
11. Class vs Function Components

1.Definition: JSXdetermines how the UI will 
look wherever the component is used.
2.Not HTML: Though it resembles HTML, 
you're actually writing JSX, which stands 
for JavaScript XML.
3.Conversion: JSX gets converted to regular 
JavaScript.
4.Babeljs.io/replis a tool that allows you to 
see how JSX is transformed into 
JavaScript.
12. What is JSX?

1.Enablesthe use of a component in other parts.
2.Default Export: Allows exporting a single component as the default 
from a module. 
3.Named Export: Allows exporting multiple items from a module. 
4.Importing: To use an exported component, you need to import it in the 
destination file using import syntax.
13. Exporting components

1.Naming: Must be capitalized; 
lowercase for default HTML.
2.HTML: Unlike vanilla JS where you 
can't directly write HTML, in React, you 
can embed HTML-like syntax using 
JSX.
3.CSS: In React, CSS can be directly 
imported into component files, allowing 
for modular and component-specific 
styling.
14. Other important Points

1.Dynamic Content:JSX allows the 
creation of dynamicand interactive 
UI components.
2.JavaScript Expressions: Using {},we 
can embed any JS expression 
directly within JSX. This includes 
variables, function calls, and more.
15. Dynamic Components

16. Reusable Components
1.Modularity: Components are modular, 
allowing for easy reuse across different 
parts of an application.
2.Consistency: Reusing components ensures 
UI consistencyand reduces the chance of 
discrepancies.
3.Efficiency: Reduces development time and 
effort by avoiding duplication of code.
4.Maintainability: Changesmade to a reused 
component reflect everywhere it's used, 
simplifying updates and bug fixes.

FF5F1F
Creating React Components Revision
10.File Extensions
11.Class vs Function Components
12.What is JSX?
13.Exporting component
14.Other important Points
15.Dynamic Components
16.Reusable Components

17. Including Bootstrap
1.Install: 
npmibootstrap@5.3.2
2.import
import"bootstrap/dist/css/bootstrap.min.css";
1.Responsive: Mobile-first design for all device 
sizes.
2.Components: Pre-styled elements like buttons 
and navbars.
3.Customizable: Modifydefault styles as needed.
4.Cross-Browser: Consistentlook across browsers.
5.Open-Source: Freewith community support.

Project: TODO App UI

Project: Clock

OurChannels
KG Coding
Some Other One shot Video Links:
•Complete React and Redux
•CompleteHTML
•Complete CSS
•Complete Git and GitHubOne 
shot University Exam Series
Knowledge GATE
KG Coding
KG Placement Prep
Sanchit Socket
KnowledgeGate Website
KnowledgeGate Android App

18. Fragments
1.What? 
Allows grouping of multiple elements without 
extra DOM nodes.
2.Why?
•Return multiple elements without a wrapping 
parent.
•Cleaner DOM and consistent styling.
3.How? Two syntaxes:
1.<React.Fragment>...</React.Fragment>
2.Short: <>...</>

1.Purpose: Render lists from array data.
2.JSX Elements: Transform array items into JSX.
3.Inline Rendering: Directly inside JSX
{items.map(item => <li key={item.id}>{item.name}</li>)}
4.Key Prop: Assign unique key for optimized re-renders.
<div key={item.id}>{item.name}</div>
19. Map Method

Conditional Rendering
•Displaying content based on certain conditions.
•Allows for dynamicuser interfaces.
Methods
•If-else statements: Choose betweentwo blocks 
of content.
•Ternary operators: Quick way to choose 
between two options.
•Logical operators: Useful for rendering content 
when a condition is true.
Benefits
•Enhances user experience.
•Reducesunnecessary rendering.
•Makes apps more interactiveand responsive.
20. Conditional Rendering

21. Passing Data via Props
Props in React
•Short for properties
•Mechanism for passing data.
•Read-onlyby default 
Usage
•Pass data from parent to child component.
•Makes components reusable.
•Defined as attributesin JSX.
Key Points
•Data flows one-way(downwards).
•Props are immutable.
•Used for communication between components.
Examples
<Header title="My App" />

1.Localizedclass names to avoid global conflicts.
2.Stylesare scopedto individual components.
3.Helpsin creating component-specificstyles.
4.Automaticallygenerates unique class names.
5.Promotesmodularand maintainableCSS.
6.Can use alongside global CSS when needed.
22. CSS Modules

Project: TODO App UI

Project Calculator

OurChannels
KG Coding
Some Other One shot Video Links:
•Complete React and Redux
•CompleteHTML
•Complete CSS
•Complete Git and GitHubOne 
shot University Exam Series
Knowledge GATE
KG Coding
KG Placement Prep
Sanchit Socket
KnowledgeGate Website
KnowledgeGate Android App

1.childrenis a special prop for passing elements into components.
2.Used for flexibleand reusablecomponent designs.
3.Commonin layout or container components.
4.Accessedwith props.children.
5.Can be any content: strings, numbers, JSX, or components. 
6.Enhancescomponent composabilityand reusability.
23. Passing Children

1.Reactevents use camelCase, e.g., onClick.
2.Usessynthetic events, not direct browser events.
3.Event handlers can be functionsor arrow functions.
4.UseonChangefor controlled form inputs.
5.Avoidinline arrow functions in JSX for performance.
24. Handling Events

1.Passdynamic behaviourbetween components.
2.Enablesupward communication from child to parent.
3.Commonly used for event handling.
4.Parentdefines a function, child invokes it.
5.Enhancescomponent interactivity. 
6.Example: 
<Button onClick={handleClick} />
25. Passing Functions via Props

1.Staterepresents data that changes over time.
2.Stateis localand privateto the component.
3.Statechanges cause the component to re-render.
4.Forfunctional components, use the useStatehook.
5.ReactFunctions that start with word useare called hooks
6.Hooksshould onlybe used inside components
7.Parentcomponents can pass state down to children via props.
8.Lifting state up: share state between components by moving it to their 
closest common ancestor.
26. Managing State

State:
•Local and mutable data within a component.
•Initialized within the component.
•Can change over time.
•Causes re-render when updated.
•Managed using useStatein functional components.
Props:
•Passed into a component from its parent.
•Read-only (immutable) within the receiving component.
•Allow parent-to-child componentcommunication.
•Changes in props can also cause a re-render.
27. State vs Props

Project Calculator

Project: TODO App

OurChannels
KG Coding
Some Other One shot Video Links:
•Complete React and Redux
•CompleteHTML
•Complete CSS
•Complete Git and GitHubOne 
shot University Exam Series
Knowledge GATE
KG Coding
KG Placement Prep
Sanchit Socket
KnowledgeGate Website
KnowledgeGate Android App

1.You can use a lot of icons without managing 
them.
2.Install Package
npminstallreact-icons –save
3.Use icon:
import {IconName} from"react-icons/fc";
28. React-icon Library

1.Inspection: Allows inspectionof React component hierarchies.
2.State & Props: View and edit the current state and props of 
components.
3.Performance: Analyzecomponent re-rendersand performance 
bottlenecks. 
4.Navigation: Conveniently navigatethrough the entire component 
tree.
5.Filtering: Filtercomponents by name or source to locate them 
quickly. 
6.Real-time Feedback: See live changes as you modify state or props.
29. Inspecting with React Dev Tools

Root Component:
•The Appis the main or root component of a React application.
•It's the starting point of your React component tree.
Virtual DOM:
•React creates an in-memory structure called the virtual DOM.
•Differentfrom the actual browser DOM.
•It's a lightweight representation where each node stands for a 
component and its attributes.
Reconciliation Process:
•When component data changes, React updatesthe virtual DOM's 
stateto mirror these changes.
•React then comparesthe currentand previous versions of the 
virtual DOM.
•It identifiesthe specific nodes that need updating.
•Onlythese nodes are updatedin the real browser DOM, making it 
efficient.
30. How React Works
Real Browser

•React and ReactDOM:
•The actualupdatingof the browser's DOM isn't done by Reactitself.
•It's handled by a companion library called react-dom.
•Root Element:
•The root div acts as a containerfor the React app.
•The script tag is where the React app starts executing.
•If you check main.tsx, the component tree is rendered inside this 
root element.
•Strict Mode Component:
•It's a special component in React.
•Doesn'thave a visualrepresentation.
•Its purpose is to spot potential issues in your React app.
•Platform Independence:
•React'sdesign allows it to beplatform-agnostic.
•While react-domhelps build web UIs using React, ReactNativecan 
be used to craft mobile app UIs.
30. How React Works

•React, Angular, and Vue:
•React is a library, while Angularand Vue.jsare frameworks.
•React focuses on UI; Angular and Vue.jsoffer comprehensive 
tools for full app development.
•Library vs. Framework:
•A library offers specific functionality.
•A frameworkprovides a set of tools and guidelines.
•In simpler terms: React is a tool; Angular and Vue.jsare toolsets.
•React'sSpecialty:
•React'smain role is crafting dynamic, interactive UIs.
•It doesn't handle routing, HTTP calls, state management, and 
more.
•React'sFlexibility:
•React doesn't dictatetool choices for other app aspects.
•Developers pick what fits their project best.
•About Angular and Vue.js:
•Angular, developed by Google, provides a robust framework with 
a steep learning curve.
•Vue.jsis known for its simplicity and ease of integration, making 
it beginner-friendly.
31. React Vs Angular vs Vue

1.State Management: Each input's state 
is stored in the component's state.
2.Handling Changes: Use onChangeto 
detect input changes.
3.Submission: Utilize onSubmitfor form 
submissions and prevent default with 
event.preventDefault().
4.Validation: Implement custom 
validation or use third-party libraries.
32. Using Forms

1.useRefallowsaccess to DOMelements and 
retains mutable values without re-renders.
2.Usedwith the refattribute for direct DOM 
interactions.
3.Can hold previous state or prop values.
4.Not limited to DOM references; can hold any 
value.
5.Refscan be passedas propsalso
33. Use Ref

•Spread Operator: Use to maintain 
immutabilitywhen updating arrays or 
objects.
•Functional Updates: Use 
(existingPosts) => [postData, ...existingPosts] 
to avoid stale values during asynchronous 
updates.
34. Update state from Previous State

1.Prop Drilling: Context API addresses prop drilling; 
component composition is an alternative.
2.Folder Setup: Use a storefolder for context files.
3.Initialization: Use React.createContextwith initial state 
and export it.
4.Provider: Implement with contextName.Providerin 
components.
5.Access Value: Use the useContexthook.
6.Dynamic Data: Combine context value with state.
7.Export Functions: Context can also export functions for 
actions
8.Logic Separation: This helps keep the UI and business 
logic separate from each other.
35. Context API

1.useReduceris a hook in React that offers more control over 
state operations compared to useState, especially for 
complex state logic.
2.Components: It involves two main components:
•Reducer: A pure function that takes the current state and 
an action and returns a new state.
•Action: An object describing what happened, typically 
having a type property.
3.Initialization: It's invoked as 
const[state, dispatch] = useReducer(reducer, initialState).
4.Dispatch: Actions are dispatched using the dispatch 
function, which invokes the reducer with the current state 
and the given action.
5.Use Cases: Particularly useful for managing state in large 
componentsor when the next state depends on the 
previous one.
6.Predictable State Management: Due to its strict structure, it 
leads to more predictable and maintainable state 
management.
36. Use Reducer

Project: Social Media

OurChannels
KG Coding
Some Other One shot Video Links:
•Complete React and Redux
•CompleteHTML
•Complete CSS
•Complete Git and GitHubOne 
shot University Exam Series
Knowledge GATE
KG Coding
KG Placement Prep
Sanchit Socket
KnowledgeGate Website
KnowledgeGate Android App

37 Introducing Dummy API

1.fetch: Modern JavaScriptAPI for network requests.
2.Promise-Based: Returns a Promisewith a Response 
object.
3.Usage: Default is GET. For POST use method: 'POST'
4.Response: Use .then() and response.json() for JSON data.
5.Errors: Doesn't reject on HTTP errors. Check response.ok.
6.Headers: Managed using the Headers API.
38. Data fetching using Fetch

1.In function-based components, useEffecthandles 
side effects like data fetching or event listeners.
2.useEffectruns automatically after every render by 
default.
3.By providing a dependency array, useEffectwill only 
run when specified variables change. An empty array 
means the effect runs once.
4.Multiple useEffecthooks can be used in a single 
component for organizing different side effects 
separately.
39. The useEffect Hook

40. Handling Loading State

Returning a function from  `useEffect` allows for 
cleanup, ideal for removing event listeners.
41. The useEffect Hook Cleanup

42. Advanced useEffect

OurChannels
KG Coding
Some Other One shot Video Links:
•Complete React and Redux
•CompleteHTML
•Complete CSS
•Complete Git and GitHubOne 
shot University Exam Series
Knowledge GATE
KG Coding
KG Placement Prep
Sanchit Socket
KnowledgeGate Website
KnowledgeGate Android App

1.Memoization: Preserves function across 
rendersto prevent unnecessary re-renders.
2.Optimization: Enhances performance in 
components with frequent updates.
3.Dependency Array: Recreates the function
only when specific dependencies change.
4.Event Handlers: Used to keep consistent 
function referencesfor child components.
5.With useEffect: Prevents infinite loops by 
maintaining function references.
43 The useCallback Hook

1.Memoization: useMemocaches the result of 
expensive calculations to enhance performance.
2.Re-computation: Only re-computes the memoized
valuewhen specific dependencies change.
3.Optimization: Helps prevent unnecessary 
recalculations, improving component rendering 
efficiency.
4.Dependency Array: Uses an array of 
dependenciesto determine when to recompute 
the cached value.
5.Comparison with useCallback: While useCallback
memoizesfunctions, useMemomemoizesvalues 
or results of functions.
6.Best Use: Ideal for intensive computations or 
operations that shouldn't run on every render.
44 The useMemo Hook

1.Reusable Logic: Custom hooks allow you to 
extract and reuse component logic across multiple 
components.
2.Naming Convention: Typically start with "use" 
(e.g., useWindowSize, useFetch).
3.Combining Hooks: Custom hooks can combine 
multiple built-in hookslike useState, useEffect, 
and others.
4.Sharing State: Enables sharing of stateful logic 
without changing component hierarchy.
5.Isolation: Helps in isolating complex logic, making 
components cleanerand easier to maintain.
6.Custom Return Values: Can return any value 
(arrays, objects, or any other data type) based on 
requirements.
45 Custom Hooks

46 Submitting data with Fetch

OurChannels
KG Coding
Some Other One shot Video Links:
•Complete React and Redux
•CompleteHTML
•Complete CSS
•Complete Git and GitHubOne 
shot University Exam Series
Knowledge GATE
KG Coding
KG Placement Prep
Sanchit Socket
KnowledgeGate Website
KnowledgeGate Android App

1.Installation: Use npminstall react-router-dom.
2.We are going to use the latest version which is 6+
3.RouterProvider: Wraps the app for routing 
capabilities.
4.createBrowserRouter: helps creating the mapping 
for router provider.
5.Declarative Routing: Easily define application 
routes.
6.Routes are React components.
47 React Router

48 Layout Routes
1.Layout Routes help us to use shared elements
2.Outletcomponent is used to render the children at the correct places

49 Route Links
1.Link Component with toproperty can be used to avoid reloading
2.useNavigatehook can be used to do navigation programmatically.

1.Loadermethod can be used to load 
data before a particular route is 
executed.
2.The loader method must return the 
datathat is loaded or promise. 
3.Datais available in component and all 
the child components.
4.useLoaderDatahook can be used to 
get the fetched data.
5.Loading state can also be used.
50 Data fetching using loader

51 Submitting data using action
1.Actionmethod can be used to perform an 
actionon submission of Forms.
2.Custom Formcomponent need to be used
along with name attribute for all inputs.
3.Action function will get an data object. To 
generate correct request object 
method=“post” attribute should be used.
4.Data.request.formData() method can be 
used to get form data Object.
5.Object.fromEntries(formData) can be used 
to get actual input data.
6.redirect() response can be returned for 
navigationafter submission.

OurChannels
KG Coding
Some Other One shot Video Links:
•Complete React and Redux
•CompleteHTML
•Complete CSS
•Complete Git and GitHubOne 
shot University Exam Series
Knowledge GATE
KG Coding
KG Placement Prep
Sanchit Socket
KnowledgeGate Website
KnowledgeGate Android App

1.State management for cross component or app-widestate.
2.Reduxis a predictable state management library for JavaScript apps.
3.Local State vs Cross-component state vs App-Wide state
4.useStateor useReducervs useStatewith prop drilling vs useStateor 
useContextor Redux
52 What is Redux

1.Youcan use both.
2.Setup and Coding is toughespecially if you have multiple context 
providers.
3.Performanceis slow. Contextshould only be used for things that rarely 
change. On the other hand Redux has great performance.
4.If these things don’t matter to you then you can choose not to use redux 
and stay with React-Context.
53 React-Context vs Redux

1.Single Source: Uses a single central store to 
maintain the entire application's state.
2.Actions: Components never directly change the 
store. Changes to state are made through 
dispatched actions, which describe events.
3.Reducers: Actionsare processed by reducers, 
pure functions that return the new state.
4.Immutable: Stateis immutable; every change 
results in a new state object. 
5.This is different from useReducerhook.
54 How Redux Works

1.npminit–y
2.npminstall redux
3.importin node Constredux = require(‘redux’);
4.We need to setup all 4  basic things:
1.Reducer
2.Store
3.Subscriber
4.Actions
5.Node redux-demo.jscommandto run node server
55 Working with Redux

1.Npminstall redux
2.Npminstall react-redux
3.Createstorefolder with Index.jsfile
4.Creatingthe store using 
Import {createStore} from redux.
5.Providingthe store with react
1.Providerfrom react-redux
2.<Provider store={store}><App /></Provider>
6.Using the store
1.useSelectorhook gets a slice of the store.
Constcounter = useSelector(state => state.counter); 
2.Subscriptionis already setup and only will re-execute 
when only your slice is changed. Subscriptionis 
automatically cleared also.
7.DispatchActionsusing the useDispatchhook.
56 React with Redux

1.Action types are difficult to maintain
2.Storebecoming too big
3.Mistakenlyediting store
4.Reducerbecomingtoo big
57 Why Redux Toolkit

1.Npminstall @reduxjs/toolkit
2.Removereduxfrom package.json
3.Import {createSlice} from “@reduxjs/toolkit”
4.Slicesof the storecan be created using the following syntax:
Constslice = createSlice({
name: ‘’,
initialState: {},  
reducers: {
smallReducerMethods: (state, action) => {
},
}
})
5.ConfigureStorecombines multiple reducers and can be used as: 
configureStore({
reducer: {name: slice.reducer}
})
6.Export actions = slice.actions;
7.Actionscan be dispatchedlike: actions.reducerMethod(payload);
58 Working with Redux Toolkit

OurChannels
KG Coding
Some Other One shot Video Links:
•Complete React and Redux
•CompleteHTML
•Complete CSS
•Complete Git and GitHubOne 
shot University Exam Series
Knowledge GATE
KG Coding
KG Placement Prep
Sanchit Socket
KnowledgeGate Website
KnowledgeGate Android App

Project 
MyntraClone