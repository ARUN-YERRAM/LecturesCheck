**Summary:**

The problem involves finding the minimum number of intervals to remove from an array of intervals to ensure no overlap. Overlapping intervals intersect at points other than their shared endpoints.

**Solution:**

1. Sort the intervals in ascending order of their ending points.
2. Initialize a count of non-overlapping intervals to 1 and the last ending point to the first interval's ending point.
3. Iterate through the remaining intervals starting from the second one.
4. Check if the current interval can be scheduled without overlapping by comparing its starting point to the last ending point.
5. If the current interval can be scheduled, increment the count and update the last ending point.
6. The minimum number of removals is the total number of intervals minus the count of non-overlapping intervals.

**Time Complexity:** O(n log n) for sorting, plus O(n) for iteration.
**Space Complexity:** O(1) since no additional space is used.