**Summary:**

**Problem 1: Validate Subsequence**
- Given two arrays, determine if the second array is a subsequence of the first.
- Algorithm:
  - Keep track of an index in the sequence array.
  - Iterate through the first array and check if each element matches the current element in the sequence.
  - If a match is found, increment the sequence index.
  - Return true if the sequence index reaches the end of the sequence; otherwise, return false.
- Time and space complexity: O(n)

**Problem 2: River Sizes**
- Given a 2D matrix representing land and water, find the sizes of all rivers (connected areas of water).
- Algorithm:
  - Depth-first search (DFS) or breadth-first search (BFS) to traverse each cell in the matrix.
  - Keep track of visited cells to avoid revisiting.
  - Maintain a current river size variable and increment it as you traverse connected water cells.
  - Push the current river size to an array when all connected cells are visited.
- Time and space complexity: O(n * m), where n and m are the dimensions of the matrix

**Problem 3: Shift Linked List**
- Given a linked list and an integer k, shift the list by k positions (positive or negative).
- Algorithm:
  - For positive k:
    - Find the new tail position based on length minus k.
    - Traverse to the new tail position and set its next to null.
    - Set the next of the current node to the new head.
    - Update the head to the new head.
  - For negative k:
    - Calculate new tail position based on the absolute value of k.
    - Traverse to the new tail position and set its next to the original head.
    - Update the head to the new head.
- Time complexity: O(n), where n is the length of the linked list